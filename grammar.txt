statement   : if-expr
            : while-expr
            : expr
            : num-expr
            : function-def

if-expr     : KEYWORD:if LPAREN num-expr RPAREN LCPAREN (statement)* RCPAREN
                (KEYWORD:elif LCPAREN (statement)* RCPAREN)*
                (KEYWORD:else LCPAREN (statement)* RCPAREN)?

while-expr  : KEYWORD:while LPAREN num-expr RPAREN LCPAREN (statement)* RCPAREN

function-def: KEYWORD:fun TYPE? IDENTIFIER LPAREN (TYPE IDENTIFIER)? (COMMA TYPE IDENTIFIER)* RPAREN LCPAREN (statement)* (KEYWORD:return num-expr)? RCPAREN

expr        : TYPE IDENTIFIER EQ num-expr
            : KEYWORD:return num-expr

num-expr    : comp-expr ((KEYWORD:AND|KEYWORD:OR) comp-expr)*
            : function-call

function-call: IDENTIFIER LPAREN num-expr? (COMMA num-expr)* RPAREN

comp-expr   : NOT comp-expr
            : arith-expr ((EE|LT|GT|LTE|GTE) arith-expr)*

arith-expr  : term ((PLUS|MINUS) term)*

term        : factor ((MUL|DIV) factor)*

factor      : (PLUS|MINUS) factor
            : power

power       : atom (POW factor)*

atom        : INT|FLOAT|IDENTIFIER
            : LPAREN expr RPAREN
